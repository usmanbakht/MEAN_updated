{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/users'; // Replace with your backend API URL\n  }\n\n  getUsers() {\n    return this.http.get(this.apiUrl);\n  }\n  getUserById(userId) {\n    const url = `${this.apiUrl}/${userId}`;\n    return this.http.get(url);\n  }\n  createUser(user) {\n    return this.http.post(this.apiUrl, user);\n  }\n  updateUser(user) {\n    const url = `${this.apiUrl}/${user._id}`;\n    return this.http.put(url, user);\n  }\n  deleteUser(userId) {\n    const url = `${this.apiUrl}/${userId}`;\n    return this.http.delete(url);\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"names":["UserService","constructor","http","apiUrl","getUsers","get","getUserById","userId","url","createUser","user","post","updateUser","_id","put","deleteUser","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\metavystic\\Desktop\\test\\MyApp\\frontend\\src\\app\\shared\\users.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { User } from './users.model'; // Assuming you have defined the User model\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class UserService {\n  private apiUrl = 'http://localhost:3000/users'; // Replace with your backend API URL\n\n  constructor(private http: HttpClient) {}\n\n  getUsers(): Observable<User[]> {\n    return this.http.get<User[]>(this.apiUrl);\n  }\n\n  getUserById(userId: string): Observable<User> {\n    const url = `${this.apiUrl}/${userId}`;\n    return this.http.get<User>(url);\n  }\n\n  createUser(user: User): Observable<User> {\n    return this.http.post<User>(this.apiUrl, user);\n  }\n\n  updateUser(user: User): Observable<User> {\n    const url = `${this.apiUrl}/${user._id}`;\n    return this.http.put<User>(url, user);\n  }\n\n  deleteUser(userId: string): Observable<any> {\n    const url = `${this.apiUrl}/${userId}`;\n    return this.http.delete(url);\n  }\n}\n"],"mappings":";;AAQA,OAAM,MAAOA,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,6BAA6B,CAAC,CAAC;EAET;;EAEvCC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAS,IAAI,CAACF,MAAM,CAAC;EAC3C;EAEAG,WAAWA,CAACC,MAAc;IACxB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,MAAM,IAAII,MAAM,EAAE;IACtC,OAAO,IAAI,CAACL,IAAI,CAACG,GAAG,CAAOG,GAAG,CAAC;EACjC;EAEAC,UAAUA,CAACC,IAAU;IACnB,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAO,IAAI,CAACR,MAAM,EAAEO,IAAI,CAAC;EAChD;EAEAE,UAAUA,CAACF,IAAU;IACnB,MAAMF,GAAG,GAAG,GAAG,IAAI,CAACL,MAAM,IAAIO,IAAI,CAACG,GAAG,EAAE;IACxC,OAAO,IAAI,CAACX,IAAI,CAACY,GAAG,CAAON,GAAG,EAAEE,IAAI,CAAC;EACvC;EAEAK,UAAUA,CAACR,MAAc;IACvB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACL,MAAM,IAAII,MAAM,EAAE;IACtC,OAAO,IAAI,CAACL,IAAI,CAACc,MAAM,CAACR,GAAG,CAAC;EAC9B;;AA1BWR,WAAW,C;mBAAXA,WAAW,EAAAiB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;AAAXpB,WAAW,C;SAAXA,WAAW;EAAAqB,OAAA,EAAXrB,WAAW,CAAAsB,IAAA;EAAAC,UAAA,EAFV;AAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}