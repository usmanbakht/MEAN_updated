{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { UsersService } from '../shared/users.service';\nexport let UsersComponent = class UsersComponent {\n  constructor(userService) {\n    this.userService = userService;\n  }\n  ngOnInit() {\n    this.resetForm();\n    this.refreshUsersList();\n  }\n  resetForm(form) {\n    if (form) form.reset();\n    this.userService.selectedUsers = {\n      _id: '',\n      first_name: '',\n      last_name: '',\n      email: '',\n      password: ''\n    };\n  }\n  onSubmit(form) {\n    if (form.value._id == '') {\n      this.userService.postUsers(form.value).subscribe(res => {\n        this.resetForm(form);\n        this.refreshUsersList();\n        M.toast({\n          html: 'Saved successfully',\n          classes: 'rounded'\n        });\n      });\n    } else {\n      this.userService.putUsers(form.value).subscribe(res => {\n        this.resetForm(form);\n        this.refreshUsersList();\n        M.toast({\n          html: 'Updated successfully',\n          classes: 'rounded'\n        });\n      });\n    }\n  }\n  refreshUsersList() {\n    this.userService.getUsersList().subscribe(res => {\n      this.userService.users = res;\n    });\n  }\n  onEdit(emp) {\n    this.userService.selectedUsers = emp;\n  }\n  onDelete(_id, form) {\n    if (confirm('Are you sure to delete this record ?') == true) {\n      this.userService.deleteUsers(_id).subscribe(res => {\n        this.refreshUsersList();\n        this.resetForm(form);\n        M.toast({\n          html: 'Deleted successfully',\n          classes: 'rounded'\n        });\n      });\n    }\n  }\n};\nUsersComponent = __decorate([Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html',\n  styleUrls: ['./users.component.css'],\n  providers: [UsersService]\n})], UsersComponent);","map":{"version":3,"names":["Component","UsersService","UsersComponent","constructor","userService","ngOnInit","resetForm","refreshUsersList","form","reset","selectedUsers","_id","first_name","last_name","email","password","onSubmit","value","postUsers","subscribe","res","M","toast","html","classes","putUsers","getUsersList","users","onEdit","emp","onDelete","confirm","deleteUsers","__decorate","selector","templateUrl","styleUrls","providers"],"sources":["C:\\Users\\metavystic\\Desktop\\test\\MyApp\\frontend\\src\\app\\users\\users.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Users } from '../shared/users.model';\nimport { NgForm } from '@angular/forms';\n\nimport { UsersService } from '../shared/users.service';\ndeclare var M: any;\n\n@Component({\n  selector: 'app-users',\n  templateUrl: './users.component.html',\n  styleUrls: ['./users.component.css'],\n  providers: [UsersService],\n})\nexport class UsersComponent implements OnInit {\n  constructor(public userService: UsersService) {}\n  ngOnInit(): void {\n    this.resetForm();\n    this.refreshUsersList();\n  }\n  resetForm(form?: NgForm) {\n    if (form) form.reset();\n    this.userService.selectedUsers = {\n      _id: '',\n      first_name: '',\n      last_name: '',\n      email: '',\n      password: '',\n    };\n  }\n\n  onSubmit(form: NgForm) {\n    if (form.value._id == '') {\n      this.userService.postUsers(form.value).subscribe((res) => {\n        this.resetForm(form);\n        this.refreshUsersList();\n        M.toast({ html: 'Saved successfully', classes: 'rounded' });\n      });\n    } else {\n      this.userService.putUsers(form.value).subscribe((res) => {\n        this.resetForm(form);\n        this.refreshUsersList();\n        M.toast({ html: 'Updated successfully', classes: 'rounded' });\n      });\n    }\n  }\n\n  refreshUsersList() {\n    this.userService.getUsersList().subscribe((res) => {\n      this.userService.users = res as Users[];\n    });\n  }\n\n  onEdit(emp: Users) {\n    this.userService.selectedUsers = emp;\n  }\n\n  onDelete(_id: string, form: NgForm) {\n    if (confirm('Are you sure to delete this record ?') == true) {\n      this.userService.deleteUsers(_id).subscribe((res) => {\n        this.refreshUsersList();\n        this.resetForm(form);\n        M.toast({ html: 'Deleted successfully', classes: 'rounded' });\n      });\n    }\n  }\n}\n"],"mappings":";AAAA,SAASA,SAAS,QAAgB,eAAe;AAIjD,SAASC,YAAY,QAAQ,yBAAyB;AAS/C,WAAMC,cAAc,GAApB,MAAMA,cAAc;EACzBC,YAAmBC,WAAyB;IAAzB,KAAAA,WAAW,GAAXA,WAAW;EAAiB;EAC/CC,QAAQA,CAAA;IACN,IAAI,CAACC,SAAS,EAAE;IAChB,IAAI,CAACC,gBAAgB,EAAE;EACzB;EACAD,SAASA,CAACE,IAAa;IACrB,IAAIA,IAAI,EAAEA,IAAI,CAACC,KAAK,EAAE;IACtB,IAAI,CAACL,WAAW,CAACM,aAAa,GAAG;MAC/BC,GAAG,EAAE,EAAE;MACPC,UAAU,EAAE,EAAE;MACdC,SAAS,EAAE,EAAE;MACbC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE;KACX;EACH;EAEAC,QAAQA,CAACR,IAAY;IACnB,IAAIA,IAAI,CAACS,KAAK,CAACN,GAAG,IAAI,EAAE,EAAE;MACxB,IAAI,CAACP,WAAW,CAACc,SAAS,CAACV,IAAI,CAACS,KAAK,CAAC,CAACE,SAAS,CAAEC,GAAG,IAAI;QACvD,IAAI,CAACd,SAAS,CAACE,IAAI,CAAC;QACpB,IAAI,CAACD,gBAAgB,EAAE;QACvBc,CAAC,CAACC,KAAK,CAAC;UAAEC,IAAI,EAAE,oBAAoB;UAAEC,OAAO,EAAE;QAAS,CAAE,CAAC;MAC7D,CAAC,CAAC;KACH,MAAM;MACL,IAAI,CAACpB,WAAW,CAACqB,QAAQ,CAACjB,IAAI,CAACS,KAAK,CAAC,CAACE,SAAS,CAAEC,GAAG,IAAI;QACtD,IAAI,CAACd,SAAS,CAACE,IAAI,CAAC;QACpB,IAAI,CAACD,gBAAgB,EAAE;QACvBc,CAAC,CAACC,KAAK,CAAC;UAAEC,IAAI,EAAE,sBAAsB;UAAEC,OAAO,EAAE;QAAS,CAAE,CAAC;MAC/D,CAAC,CAAC;;EAEN;EAEAjB,gBAAgBA,CAAA;IACd,IAAI,CAACH,WAAW,CAACsB,YAAY,EAAE,CAACP,SAAS,CAAEC,GAAG,IAAI;MAChD,IAAI,CAAChB,WAAW,CAACuB,KAAK,GAAGP,GAAc;IACzC,CAAC,CAAC;EACJ;EAEAQ,MAAMA,CAACC,GAAU;IACf,IAAI,CAACzB,WAAW,CAACM,aAAa,GAAGmB,GAAG;EACtC;EAEAC,QAAQA,CAACnB,GAAW,EAAEH,IAAY;IAChC,IAAIuB,OAAO,CAAC,sCAAsC,CAAC,IAAI,IAAI,EAAE;MAC3D,IAAI,CAAC3B,WAAW,CAAC4B,WAAW,CAACrB,GAAG,CAAC,CAACQ,SAAS,CAAEC,GAAG,IAAI;QAClD,IAAI,CAACb,gBAAgB,EAAE;QACvB,IAAI,CAACD,SAAS,CAACE,IAAI,CAAC;QACpBa,CAAC,CAACC,KAAK,CAAC;UAAEC,IAAI,EAAE,sBAAsB;UAAEC,OAAO,EAAE;QAAS,CAAE,CAAC;MAC/D,CAAC,CAAC;;EAEN;CACD;AApDYtB,cAAc,GAAA+B,UAAA,EAN1BjC,SAAS,CAAC;EACTkC,QAAQ,EAAE,WAAW;EACrBC,WAAW,EAAE,wBAAwB;EACrCC,SAAS,EAAE,CAAC,uBAAuB,CAAC;EACpCC,SAAS,EAAE,CAACpC,YAAY;CACzB,CAAC,C,EACWC,cAAc,CAoD1B"},"metadata":{},"sourceType":"module","externalDependencies":[]}